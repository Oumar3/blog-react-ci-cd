name: Continuous Deployment

# D√©clenche le CD apr√®s le succ√®s du workflow CI
on:
  workflow_run:
    workflows: ["Continuous Integration"]   # Nom exact du workflow CI
    types:
      - completed

jobs:
  deploy:
    # S'ex√©cute si le CI s'est termin√© (pour permettre le fallback)
    if: ${{ github.event.workflow_run.conclusion != 'cancelled' }}
    runs-on: ubuntu-latest

    steps:
      # Checkout pour r√©cup√©rer le repo (optionnel si artefact suffit)
      - uses: actions/checkout@v4

      # T√©l√©charger l'artefact build du CI
      - name: Download build artifact
        uses: actions/download-artifact@v4
        id: download-artifact
        continue-on-error: true
        with:
          name: react-build-${{ github.event.workflow_run.run_number }}
          path: ./dist

      # Si l'artefact n'existe pas, construire nous-m√™mes (fallback)
      - name: Build app (fallback if artifact missing)
        if: steps.download-artifact.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è Artefact manquant, construction en fallback..."
          cd blog
          npm ci
          npm run build
          cp -r dist ../dist/
          echo "‚úÖ Build de fallback termin√©"

      # V√©rifier que les fichiers de build sont pr√™ts
      - name: Verify deployment files
        run: |
          echo "üì¶ V√©rification des fichiers de d√©ploiement:"
          ls -la ./dist/
          echo "üìÅ Contenu d√©taill√©:"
          find ./dist -type f -exec ls -lh {} \;
          echo "üìä Taille totale du build:"
          du -sh ./dist/
          echo "‚úÖ Fichiers pr√™ts pour d√©ploiement"

      # D√©ploiement sur le serveur via SSH
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "üöÄ D√©but du d√©ploiement..."
            
            # V√©rification de l'environnement
            echo "üìç R√©pertoire courant: $(pwd)"
            echo "üë§ Utilisateur: $(whoami)"
            echo "üïí Date: $(date)"
            echo "üíæ Espace disque disponible:"
            df -h
            
            # Simulation du d√©ploiement
            echo "üì¶ Simulation: v√©rification du r√©pertoire d'app..."
            # cd /var/www/my-react-app || { echo "‚ùå R√©pertoire d'app introuvable"; exit 1; }
            echo "‚úÖ R√©pertoire d'app OK (simulation)"
            
            echo "üîÑ Simulation: backup de l'ancien build..."
            # if [ -d "backup" ]; then rm -rf backup; fi
            # if [ -f "index.html" ]; then 
            #   mkdir -p backup
            #   cp -r * backup/ 2>/dev/null || true
            # fi
            echo "‚úÖ Backup termin√© (simulation)"
            
            echo "üóëÔ∏è Simulation: suppression de l'ancien build..."
            # rm -rf assets/ index.html *.js *.css *.ico *.svg 2>/dev/null || true
            echo "‚úÖ Ancien build supprim√© (simulation)"
            
            echo "üéâ D√©ploiement simul√© termin√© avec succ√®s!"

      # Transfert des fichiers vers le serveur (COMMENT√â - d√©commenter pour d√©ploiement r√©el)
      # - name: Transfer files to VPS
      #   uses: appleboy/scp-action@v0.1.7
      #   with:
      #     host: ${{ secrets.VPS_HOST }}
      #     username: ${{ secrets.VPS_USER }}
      #     key: ${{ secrets.VPS_SSH_KEY }}
      #     source: "./dist/*"
      #     target: "/var/www/my-react-app/"
      #     strip_components: 1
      #     rm: true  # Supprime les fichiers distants avant copie
          
      # Red√©marrage serveur si n√©cessaire (COMMENT√â - d√©commenter pour d√©ploiement r√©el)
      # - name: Restart services
      #   uses: appleboy/ssh-action@v0.1.8
      #   with:
      #     host: ${{ secrets.VPS_HOST }}
      #     username: ${{ secrets.VPS_USER }}
      #     key: ${{ secrets.VPS_SSH_KEY }}
      #     script: |
      #       echo "üîÑ Red√©marrage des services..."
      #       
      #       # Red√©marrage nginx (si utilis√©)
      #       sudo systemctl reload nginx || echo "‚ö†Ô∏è Nginx non configur√©"
      #       
      #       # Red√©marrage PM2 (si utilis√© pour servir les fichiers statiques)
      #       # pm2 restart my-app || echo "‚ö†Ô∏è PM2 non configur√©"
      #       
      #       echo "‚úÖ D√©ploiement termin√© avec succ√®s!"
